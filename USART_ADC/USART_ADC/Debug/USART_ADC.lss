
USART_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  00000358  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f7  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b5  00000000  00000000  00000cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003be  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ff  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ff  00000000  00000000  00001d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001e02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 31       	cpi	r26, 0x10	; 16
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  88:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <USART_write>:
	else
		return 0;
}

void USART_write(unsigned char caracter){
	while(!(UCSR0A&(1<<5)));				// mientras el registro UDR0 esté lleno espera
  90:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  94:	95 ff       	sbrs	r25, 5
  96:	fc cf       	rjmp	.-8      	; 0x90 <USART_write>
	UDR0 = caracter;						//cuando el el registro UDR0 está vacio se envia el caracter
  98:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  9c:	08 95       	ret

0000009e <USART_write_txt>:
}

void USART_write_txt(char* cadena){
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	ec 01       	movw	r28, r24
	while(*cadena !=0x00){
  a4:	03 c0       	rjmp	.+6      	; 0xac <USART_write_txt+0xe>
		USART_write(*cadena);				//transmite los caracteres de cadena
  a6:	0e 94 48 00 	call	0x90	; 0x90 <USART_write>
		cadena++;							//incrementa la ubicación de los caracteres en cadena para enviar el siguiente caracter de cadena
  aa:	21 96       	adiw	r28, 0x01	; 1
	while(!(UCSR0A&(1<<5)));				// mientras el registro UDR0 esté lleno espera
	UDR0 = caracter;						//cuando el el registro UDR0 está vacio se envia el caracter
}

void USART_write_txt(char* cadena){
	while(*cadena !=0x00){
  ac:	88 81       	ld	r24, Y
  ae:	81 11       	cpse	r24, r1
  b0:	fa cf       	rjmp	.-12     	; 0xa6 <USART_write_txt+0x8>
		USART_write(*cadena);				//transmite los caracteres de cadena
		cadena++;							//incrementa la ubicación de los caracteres en cadena para enviar el siguiente caracter de cadena
	}
}
  b2:	df 91       	pop	r29
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <main>:


int main(void){
	
	// CONFIGURACION DE USART
    DDRB |= (1<<5);		//PB5	COMO SALIDA		
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<1);		//PD1	COMO SALIDA TXa
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<0);	//PD0	COMO ENTRADA RX
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	8e 7f       	andi	r24, 0xFE	; 254
  c8:	8a b9       	out	0x0a, r24	; 10
	UCSR0A = (0<<TXC0)|(0<<U2X0)|(0<<MPCM0); 
  ca:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02)|(0<<TXB80);
  ce:	88 e9       	ldi	r24, 0x98	; 152
  d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)|(0<<UCPOL0);
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0 = 103;		//TRANSMISION 9600
  da:	87 e6       	ldi	r24, 0x67	; 103
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
	//CONFIGURACION DE INTERRUPCION Y SENSOR ULTRASONICO
	cli();		//Desactivamos interrupciones globales
  e6:	f8 94       	cli
	DDRD= 0b11111011;		//Configuramos el puerto D como entrada(echo) y salida (trigger)
  e8:	8b ef       	ldi	r24, 0xFB	; 251
  ea:	8a b9       	out	0x0a, r24	; 10
	EICRA |= (1<<ISC00);		//Cuqluier cambio logico activa la interrupcion en int0
  ec:	e9 e6       	ldi	r30, 0x69	; 105
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC01);
  f6:	80 81       	ld	r24, Z
  f8:	8d 7f       	andi	r24, 0xFD	; 253
  fa:	80 83       	st	Z, r24
	
	EIMSK |=(1<<INT0);		// Activamos interrupcion externa en int0
  fc:	8d b3       	in	r24, 0x1d	; 29
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	8d bb       	out	0x1d, r24	; 29
	sei();		//Activamos interrupciones globales
 102:	78 94       	sei
	
    while (1) {
		
		PORTD |= (1<<PIND1);	//ponemos en alto para que mande un pulso sonico
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	82 60       	ori	r24, 0x02	; 2
 108:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	25 e3       	ldi	r18, 0x35	; 53
 10c:	2a 95       	dec	r18
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x54>
 110:	00 00       	nop
		_delay_us(10);
		PORTD &= ~(1<<PIND1);	//volvemos a poner en 0
 112:	8b b1       	in	r24, 0x0b	; 11
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	8b b9       	out	0x0b, r24	; 11
		
		distancia = pulso/900;		//leemos el ancho del pulso
 118:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <pulso>
 11c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <pulso+0x1>
 120:	64 e8       	ldi	r22, 0x84	; 132
 122:	73 e0       	ldi	r23, 0x03	; 3
 124:	0e 94 08 01 	call	0x210	; 0x210 <__divmodhi4>
 128:	cb 01       	movw	r24, r22
 12a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 12e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
		itoa(distancia,muestra,10);
 132:	4a e0       	ldi	r20, 0x0A	; 10
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	66 e0       	ldi	r22, 0x06	; 6
 138:	71 e0       	ldi	r23, 0x01	; 1
 13a:	0e 94 30 01 	call	0x260	; 0x260 <itoa>
		strcat(muestra,"~");
 13e:	e6 e0       	ldi	r30, 0x06	; 6
 140:	f1 e0       	ldi	r31, 0x01	; 1
 142:	01 90       	ld	r0, Z+
 144:	00 20       	and	r0, r0
 146:	e9 f7       	brne	.-6      	; 0x142 <main+0x8a>
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	8e e7       	ldi	r24, 0x7E	; 126
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	91 83       	std	Z+1, r25	; 0x01
 150:	80 83       	st	Z, r24
		USART_write_txt(muestra);
 152:	86 e0       	ldi	r24, 0x06	; 6
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 4f 00 	call	0x9e	; 0x9e <USART_write_txt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	91 ee       	ldi	r25, 0xE1	; 225
 15e:	24 e0       	ldi	r18, 0x04	; 4
 160:	81 50       	subi	r24, 0x01	; 1
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	20 40       	sbci	r18, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0xa8>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0xb2>
 16a:	00 00       	nop
 16c:	cb cf       	rjmp	.-106    	; 0x104 <main+0x4c>

0000016e <__vector_1>:
		USART_write(*cadena);				//transmite los caracteres de cadena
		cadena++;							//incrementa la ubicación de los caracteres en cadena para enviar el siguiente caracter de cadena
	}
}

ISR(INT0_vect){
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
 17a:	9f 93       	push	r25
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	TCCR1A &= ~(1<<WGM10);
 180:	e0 e8       	ldi	r30, 0x80	; 128
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	8e 7f       	andi	r24, 0xFE	; 254
 188:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11);
 18a:	80 81       	ld	r24, Z
 18c:	8d 7f       	andi	r24, 0xFD	; 253
 18e:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM12);
 190:	e1 e8       	ldi	r30, 0x81	; 129
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	87 7f       	andi	r24, 0xF7	; 247
 198:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);		//modo de operacion normal de la interrupcion
 19a:	80 81       	ld	r24, Z
 19c:	8f 7e       	andi	r24, 0xEF	; 239
 19e:	80 83       	st	Z, r24
	
	if(i==1){
 1a0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i>
 1a4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i+0x1>
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	71 f4       	brne	.+28     	; 0x1c8 <__vector_1+0x5a>
		pulso = TCNT1;		//registro que almacena el tiempo transcurrido por el timer
 1ac:	e4 e8       	ldi	r30, 0x84	; 132
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	91 81       	ldd	r25, Z+1	; 0x01
 1b4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <pulso+0x1>
 1b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <pulso>
		TCNT1=0x0000;		// se hace 0 para no acumular valores
 1bc:	11 82       	std	Z+1, r1	; 0x01
 1be:	10 82       	st	Z, r1
		i=0;
 1c0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <i+0x1>
 1c4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <i>
	}
	if(i==0){
 1c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <i>
 1cc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <i+0x1>
 1d0:	89 2b       	or	r24, r25
 1d2:	a9 f4       	brne	.+42     	; 0x1fe <__vector_1+0x90>
		TCNT1 = 0x0000;
 1d4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 1d8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		
		// cada 16ms el periodo es 32ms
		TCCR1B |= (1<<CS10);
 1dc:	e1 e8       	ldi	r30, 0x81	; 129
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	80 83       	st	Z, r24
		TCCR1B &= ~(1<<CS11);
 1e6:	80 81       	ld	r24, Z
 1e8:	8d 7f       	andi	r24, 0xFD	; 253
 1ea:	80 83       	st	Z, r24
		TCCR1B &= ~(1<<CS12);
 1ec:	80 81       	ld	r24, Z
 1ee:	8b 7f       	andi	r24, 0xFB	; 251
 1f0:	80 83       	st	Z, r24
		i=1;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <i+0x1>
 1fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <i>
	}
	
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__divmodhi4>:
 210:	97 fb       	bst	r25, 7
 212:	07 2e       	mov	r0, r23
 214:	16 f4       	brtc	.+4      	; 0x21a <__divmodhi4+0xa>
 216:	00 94       	com	r0
 218:	07 d0       	rcall	.+14     	; 0x228 <__divmodhi4_neg1>
 21a:	77 fd       	sbrc	r23, 7
 21c:	09 d0       	rcall	.+18     	; 0x230 <__divmodhi4_neg2>
 21e:	0e 94 1c 01 	call	0x238	; 0x238 <__udivmodhi4>
 222:	07 fc       	sbrc	r0, 7
 224:	05 d0       	rcall	.+10     	; 0x230 <__divmodhi4_neg2>
 226:	3e f4       	brtc	.+14     	; 0x236 <__divmodhi4_exit>

00000228 <__divmodhi4_neg1>:
 228:	90 95       	com	r25
 22a:	81 95       	neg	r24
 22c:	9f 4f       	sbci	r25, 0xFF	; 255
 22e:	08 95       	ret

00000230 <__divmodhi4_neg2>:
 230:	70 95       	com	r23
 232:	61 95       	neg	r22
 234:	7f 4f       	sbci	r23, 0xFF	; 255

00000236 <__divmodhi4_exit>:
 236:	08 95       	ret

00000238 <__udivmodhi4>:
 238:	aa 1b       	sub	r26, r26
 23a:	bb 1b       	sub	r27, r27
 23c:	51 e1       	ldi	r21, 0x11	; 17
 23e:	07 c0       	rjmp	.+14     	; 0x24e <__udivmodhi4_ep>

00000240 <__udivmodhi4_loop>:
 240:	aa 1f       	adc	r26, r26
 242:	bb 1f       	adc	r27, r27
 244:	a6 17       	cp	r26, r22
 246:	b7 07       	cpc	r27, r23
 248:	10 f0       	brcs	.+4      	; 0x24e <__udivmodhi4_ep>
 24a:	a6 1b       	sub	r26, r22
 24c:	b7 0b       	sbc	r27, r23

0000024e <__udivmodhi4_ep>:
 24e:	88 1f       	adc	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	5a 95       	dec	r21
 254:	a9 f7       	brne	.-22     	; 0x240 <__udivmodhi4_loop>
 256:	80 95       	com	r24
 258:	90 95       	com	r25
 25a:	bc 01       	movw	r22, r24
 25c:	cd 01       	movw	r24, r26
 25e:	08 95       	ret

00000260 <itoa>:
 260:	45 32       	cpi	r20, 0x25	; 37
 262:	51 05       	cpc	r21, r1
 264:	20 f4       	brcc	.+8      	; 0x26e <itoa+0xe>
 266:	42 30       	cpi	r20, 0x02	; 2
 268:	10 f0       	brcs	.+4      	; 0x26e <itoa+0xe>
 26a:	0c 94 3b 01 	jmp	0x276	; 0x276 <__itoa_ncheck>
 26e:	fb 01       	movw	r30, r22
 270:	10 82       	st	Z, r1
 272:	cb 01       	movw	r24, r22
 274:	08 95       	ret

00000276 <__itoa_ncheck>:
 276:	bb 27       	eor	r27, r27
 278:	4a 30       	cpi	r20, 0x0A	; 10
 27a:	31 f4       	brne	.+12     	; 0x288 <__itoa_ncheck+0x12>
 27c:	99 23       	and	r25, r25
 27e:	22 f4       	brpl	.+8      	; 0x288 <__itoa_ncheck+0x12>
 280:	bd e2       	ldi	r27, 0x2D	; 45
 282:	90 95       	com	r25
 284:	81 95       	neg	r24
 286:	9f 4f       	sbci	r25, 0xFF	; 255
 288:	0c 94 47 01 	jmp	0x28e	; 0x28e <__utoa_common>

0000028c <__utoa_ncheck>:
 28c:	bb 27       	eor	r27, r27

0000028e <__utoa_common>:
 28e:	fb 01       	movw	r30, r22
 290:	55 27       	eor	r21, r21
 292:	aa 27       	eor	r26, r26
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	aa 1f       	adc	r26, r26
 29a:	a4 17       	cp	r26, r20
 29c:	10 f0       	brcs	.+4      	; 0x2a2 <__utoa_common+0x14>
 29e:	a4 1b       	sub	r26, r20
 2a0:	83 95       	inc	r24
 2a2:	50 51       	subi	r21, 0x10	; 16
 2a4:	b9 f7       	brne	.-18     	; 0x294 <__utoa_common+0x6>
 2a6:	a0 5d       	subi	r26, 0xD0	; 208
 2a8:	aa 33       	cpi	r26, 0x3A	; 58
 2aa:	08 f0       	brcs	.+2      	; 0x2ae <__utoa_common+0x20>
 2ac:	a9 5d       	subi	r26, 0xD9	; 217
 2ae:	a1 93       	st	Z+, r26
 2b0:	00 97       	sbiw	r24, 0x00	; 0
 2b2:	79 f7       	brne	.-34     	; 0x292 <__utoa_common+0x4>
 2b4:	b1 11       	cpse	r27, r1
 2b6:	b1 93       	st	Z+, r27
 2b8:	11 92       	st	Z+, r1
 2ba:	cb 01       	movw	r24, r22
 2bc:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <strrev>

000002c0 <strrev>:
 2c0:	dc 01       	movw	r26, r24
 2c2:	fc 01       	movw	r30, r24
 2c4:	67 2f       	mov	r22, r23
 2c6:	71 91       	ld	r23, Z+
 2c8:	77 23       	and	r23, r23
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <strrev+0x4>
 2cc:	32 97       	sbiw	r30, 0x02	; 2
 2ce:	04 c0       	rjmp	.+8      	; 0x2d8 <strrev+0x18>
 2d0:	7c 91       	ld	r23, X
 2d2:	6d 93       	st	X+, r22
 2d4:	70 83       	st	Z, r23
 2d6:	62 91       	ld	r22, -Z
 2d8:	ae 17       	cp	r26, r30
 2da:	bf 07       	cpc	r27, r31
 2dc:	c8 f3       	brcs	.-14     	; 0x2d0 <strrev+0x10>
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
